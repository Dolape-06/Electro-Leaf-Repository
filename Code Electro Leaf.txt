#include <FastLED.h>
#include <SoftwareSerial.h>

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                        DEFINICIONES Y CONFIGURACIÓN                                  //
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Esta sección contiene todas las definiciones de pines, constantes y variables globales.
 * Incluye la configuración para la tira LED, el módulo Bluetooth y el sensor de sonido.
 */

#define PIXEL_PIN 9
#define PIXEL_COUNT 150
#define LED_TYPE WS2811
#define COLOR_ORDER BRG
CRGB leds[PIXEL_COUNT];

SoftwareSerial miBT(10, 11);

#define PIN_MIC A0
#define MUESTRAS 10
#define UMBRAL 500

int muestras[MUESTRAS];
int indiceMuestra = 0;

int estado = 0;
int nuevoEstado = 0;
String mainString = "";
unsigned long lastUpdate = 0;
const long interval = 10; // Intervalo de verificación reducido a 10 ms

// Variables para gradualColorChange
int targetR = 0, targetG = 0, targetB = 0;
int currentR = 0, currentG = 0, currentB = 0;
int colorChangeIndex = 0;
bool isGradualChangeActive = false;

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            CONFIGURACIÓN INICIAL                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * La función setup() se ejecuta una vez al inicio.
 * Inicializa la tira LED, la comunicación serial y Bluetooth, y prepara el array de muestras de sonido.
 */

void setup() {
  FastLED.addLeds<LED_TYPE, PIXEL_PIN, COLOR_ORDER>(leds, PIXEL_COUNT);
  FastLED.clear();
  FastLED.show();

  Serial.begin(9600);
  miBT.begin(38400);
  Serial.println("Sistema listo. Enviar comandos del 0 al 9 o RGB (R,G,B).");

  for (int i = 0; i < MUESTRAS; i++) {
    muestras[i] = 0;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            LOOP PRINCIPAL                                            //
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * La función loop() se ejecuta continuamente.
 * Maneja la recepción de comandos, actualiza el estado y ejecuta el efecto actual.
 * Utiliza un intervalo no bloqueante para controlar la frecuencia de actualización.
 */

void loop() {
  unsigned long currentMillis = millis();

  if (currentMillis - lastUpdate >= interval) {
    lastUpdate = currentMillis;

    if (miBT.available()) {
      mainString = miBT.readStringUntil('\n');
      mainString.trim();
      parseAndSetState(mainString);
    }

    if (estado != nuevoEstado) {
      estado = nuevoEstado;
      iniciarEfecto(estado);
    }

    ejecutarEfectoActual();
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                      FUNCIONES DE CONTROL DE ESTADO                                  //
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Estas funciones manejan la interpretación de comandos y el cambio de estados.
 * Incluyen el parsing de comandos, la configuración de colores RGB y la inicialización de efectos.
 */

void parseAndSetState(String data) {
  if (data.indexOf(',') != -1) {
    parseAndSetColor(data);
  } else if (data.length() == 1 && data[0] >= '0' && data[0] <= '9') {
    nuevoEstado = data[0] - '0';
    Serial.println("Nuevo efecto seleccionado: " + String(nuevoEstado));
    miBT.println("Nuevo efecto seleccionado: " + String(nuevoEstado));
  } else {
    Serial.println("Error: Comando no válido.");
    miBT.println("Error: Comando no válido.");
  }
}

void parseAndSetColor(String data) {
  int r = data.substring(0, data.indexOf(',')).toInt();
  int g = data.substring(data.indexOf(',') + 1, data.lastIndexOf(',')).toInt();
  int b = data.substring(data.lastIndexOf(',') + 1).toInt();
  
  if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
    nuevoEstado = 10; // Estado especial para color RGB
    iniciarGradualColorChange(r, g, b);
    Serial.println("Iniciando cambio gradual a color RGB: " + String(r) + "," + String(g) + "," + String(b));
    miBT.println("Iniciando cambio gradual a color RGB: " + String(r) + "," + String(g) + "," + String(b));
  } else {
    Serial.println("Error: Valores RGB deben estar entre 0 y 255.");
    miBT.println("Error: Valores RGB deben estar entre 0 y 255.");
  }
}

void iniciarGradualColorChange(int r, int g, int b) {
  targetR = r;
  targetG = g;
  targetB = b;
  colorChangeIndex = 0;
  isGradualChangeActive = true;
}

void setRGBColor(int r, int g, int b) {
  fill_solid(leds, PIXEL_COUNT, CRGB(r, g, b));
  FastLED.show();
}

void iniciarEfecto(int efecto) {
  FastLED.clear();
  isGradualChangeActive = false;
  switch (efecto) {
    case 0:
      Serial.println("Modo de sonido activado.");
      miBT.println("Modo de sonido activado.");
      break;
    case 1:
      Serial.println("Efecto: Rojo sólido");
      miBT.println("Efecto: Rojo sólido");
      break;
    case 2:
      Serial.println("Efecto: Verde sólido");
      miBT.println("Efecto: Verde sólido");
      break;
    case 3:
      Serial.println("Efecto: Azul sólido");
      miBT.println("Efecto: Azul sólido");
      break;
    case 4:
      Serial.println("Efecto: Dorado sólido");
      miBT.println("Efecto: Dorado sólido");
      break;
    case 5:
      Serial.println("Efecto: Diamante sólido");
      miBT.println("Efecto: Diamante sólido");
      break;
    case 6:
      Serial.println("Efecto: Ciclo arcoíris");
      miBT.println("Efecto: Ciclo arcoíris");
      break;
    case 7:
      Serial.println("Efecto: Latido del corazón");
      miBT.println("Efecto: Latido del corazón");
      break;
    case 8:
      Serial.println("Efecto: Lluvia dinámica");
      miBT.println("Efecto: Lluvia dinámica");
      break;
    case 9:
      Serial.println("Efecto: Desvanecimiento frío");
      miBT.println("Efecto: Desvanecimiento frío");
      break;
    default:
      Serial.println("Efecto no reconocido.");
      miBT.println("Efecto no reconocido.");
      break;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                      EJECUCIÓN DE EFECTOS                                            //
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
 * Esta sección contiene la función principal para ejecutar el efecto actual
 * y las funciones específicas para cada efecto.
 */

void ejecutarEfectoActual() {
  if (isGradualChangeActive) {
    gradualColorChange();
  } else {
    switch (estado) {
      case 0: modoSonido(); break;
      case 1: iniciarGradualColorChange(255, 0, 0); break; // Rojo
      case 2: iniciarGradualColorChange(0, 255, 0); break; // Verde
      case 3: iniciarGradualColorChange(0, 0, 255); break; // Azul
      case 4: iniciarGradualColorChange(255, 100, 0); break; // Dorado
      case 5: iniciarGradualColorChange(100, 245, 228); break; // Diamante
      case 6: startRainbowCycle(); break;
      case 7: startHeartbeatEffect(); break;
      case 8: dynamicRainEffect(); break;
      case 9: startCoolFadeEffect(); break;
      default: break;
    }
  }
}

void gradualColorChange() {
  if (colorChangeIndex < PIXEL_COUNT) {
    leds[colorChangeIndex] = CRGB(targetR, targetG, targetB);
    FastLED.show();
    colorChangeIndex++;
  } else {
    isGradualChangeActive = false;
    currentR = targetR;
    currentG = targetG;
    currentB = targetB;
    Serial.println("Cambio gradual de color completado.");
    miBT.println("Cambio gradual de color completado.");
  }
}

void modoSonido() {
  int nivelSonido = leerSonidoFiltrado();
  if (nivelSonido > UMBRAL) {
    setRGBColor(255, 255, 255);
  } else {
    setRGBColor(0, 0, 0);
  }
}

int leerSonidoFiltrado() {
  int lecturaActual = abs(analogRead(PIN_MIC) - 512);
  muestras[indiceMuestra] = lecturaActual;
  indiceMuestra = (indiceMuestra + 1) % MUESTRAS;
  
  long suma = 0;
  for (int i = 0; i < MUESTRAS; i++) {
    suma += muestras[i];
  }
  return suma / MUESTRAS;
}

void startRainbowCycle() {
  static int hue = 0;
  for (int i = 0; i < PIXEL_COUNT; i++) {
    leds[i] = CHSV((hue + i * 10) % 255, 255, 255);  // Aplica color HSV a cada LED
  }
  FastLED.show();
  hue = (hue + 1) % 255;  // Incrementa el tono
}

void startHeartbeatEffect() {
  static unsigned long lastUpdate = 0;
  static float brightness = 0.0;
  static bool increasing = true;
  static uint8_t colorIndex = 0;

  // Arreglo de colores para el latido
  CRGB colors[] = {CRGB::Red, CRGB::Green, CRGB::Blue, CRGB(255, 165, 0), CRGB(128, 0, 128)};
  uint8_t numColors = sizeof(colors) / sizeof(colors[0]);

  // Controla la velocidad del latido
  if (millis() - lastUpdate >= 30) {  // Ajusta la velocidad del latido
    lastUpdate = millis();

    // Ajusta el brillo de los LEDs
    if (increasing) {
      brightness += 0.05;  // Incrementa el brillo
      if (brightness >= 1.0) {
        increasing = false;  // Empieza a disminuir el brillo
      }
    } else {
      brightness -= 0.05;  // Disminuye el brillo
      if (brightness <= 0.0) {
        increasing = true;  // Vuelve a incrementar el brillo
        colorIndex = (colorIndex + 1) % numColors;  // Cambia al siguiente color
      }
    }

    // Aplica el brillo a cada LED
    for (uint16_t i = 0; i < PIXEL_COUNT; i++) {
      CRGB color = colors[colorIndex];
      color.nscale8_video(brightness * 255);  // Aplica el brillo al color
      leds[i] = color;
    }
    FastLED.show();
  }
}

void dynamicRainEffect() {
  static unsigned long lastUpdate = 0;
  static unsigned long colorUpdate = 0;

  if (millis() - lastUpdate >= 50) {  // Controla la velocidad de la lluvia
    lastUpdate = millis();

    // Apaga gradualmente los LEDs
    for (uint16_t i = 0; i < PIXEL_COUNT; i++) {
      leds[i].fadeToBlackBy(5);  // Reduce el brillo de los LEDs
    }

    // Añade destellos aleatorios
    if (millis() - colorUpdate >= 100) {  // Ajusta el tiempo entre destellos
      colorUpdate = millis();
      for (int j = 0; j < 3; j++) {  // Número de LEDs que destellan
        int randomPixel = random(0, PIXEL_COUNT);
        leds[randomPixel] = CRGB(random(50, 255), random(50, 255), random(50, 255));  // Color aleatorio
      }
    }

    FastLED.show();
  }
}

void startCoolFadeEffect() {
  static unsigned long lastUpdate = 0;
  static uint8_t hue = 0;

  if (millis() - lastUpdate >= 100) {  // Controla la velocidad del desvanecimiento
    lastUpdate = millis();

    // Colores fríos y relajantes
    fill_solid(leds, PIXEL_COUNT, CHSV(hue, 255, 255));
    FastLED.show();

    // Actualiza el tono del color
    hue++;
  }
}

